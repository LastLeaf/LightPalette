// Copyright 2015 LastLeaf, LICENSE: github.lastleaf.me/MIT
'use strict';

var fs = require('fs');
var crypto = require('crypto');
var async = require('async');
var semver = require('semver');
var fse = require('fs-extra');
var unzip = require('unzip');
var mongorestore = require('./mongorestore.js');

module.exports = function(app, file, password, removeMode, pluginVersion, abortCb){
	var extractDir = app.config.app.siteRoot + '/xbackup/restore';

	// abort
	var aborted = false;
	var abort = function(){
		if(aborted) return;
		aborted = true;
		log('Restoring process aborted.');
		abortCb();
	};

	// open backup file
	var openFile = function(cb){
		log('Extracting backup file.');
		var rs = fs.createReadStream(file);
		rs.once('error', function(err){
			log('Failed reading backup file.');
			abort();
			cb(err);
		});
		rs.once('open', function(){
			if(!password) return cb(null, rs);
			var cryptoStream = crypto.createDecipher('aes192', password);
			cryptoStream.once('error', function(err){
				log('Password is not correct.');
				abort();
				cb(err);
			});
			rs.pipe(cryptoStream);
			return cb(null, cryptoStream);
		});
	};

	// unzip
	var unzipFile = function(rs, cb){
		fse.remove(extractDir, function(){
			var ws = unzip.Extract({ path: extractDir });
			ws.once('error', function(err){
				log('Failed extracting backup file.');
				abort();
				cb(err);
			});
			ws.once('close', function(){
				cb();
			});
			rs.pipe(ws);
		});
	};

	// clean up
	var checkVersion = function(cb){
		log('Checking versions.');
		fse.readJson(extractDir + '/xbackup.json', function(err, data){
			if(err) {
				log('Backup file is not in correct format.');
				abort();
				cb(err);
				return;
			}
			if(semver.gt(data.lightpalette, fw.config.lpVersion) || semver.gt(data.xbackup, pluginVersion)) {
				log('Backup file is generated by newer version of LightPalette or xbackup.');
				abort();
				cb('err');
				return;
			}
			cb();
		});
	};

	// restore filesystem
	var restoreFs = function(cb){
		log('Restoring filesystem.');
		// move single dir to dest
		var moveDir = function(name, cb){
			fse.move(extractDir + '/fs/' + name, app.config.app.siteRoot + '/static/' + name, {clobber: true, limit: 1}, function(err){
				if(err) {
					log('Failed copying files.');
					abort();
					cb('err');
					return;
				}
				cb();
			});
		};
		// read backup dir and move
		var moveDirs = function(cb){
			fs.readdir(extractDir + '/fs', function(err, files){
				if(err) {
					log('Failed copying files.');
					abort();
					cb('err');
					return;
				}
				async.eachSeries(files, moveDir, cb);
			});
		};
		// remove
		if(removeMode === 'erase') {
			fse.emptyDir(app.config.app.siteRoot + '/static', function(){
				moveDirs(cb);
			});
		} else if(removeMode === 'replace') {
			fs.readdir(extractDir + '/fs', function(err, files){
				async.eachSeries(files || [], function(file, cb){
					fse.remove(app.config.app.siteRoot + '/static/' + file, function(){
						cb();
					});
				}, function(){
					moveDirs(cb);
				});
			});
		} else {
			moveDirs(cb);
		}
	};

	// restore database
	var restoreDb = function(cb){
		log('Restoring database.');
		var restore = mongorestore(app.config.db);
		// TODO handling remove mode
		restore.once('error', function(err){
			log('Failed writing database.');
			abort();
			cb(err);
		});
		restore.once('connect', function(err){
			fs.readdir(extractDir + '/db', function(err, files){
				if(err) {
					log('Failed listing database.');
					abort();
					cb(err);
					return;
				}
				async.eachSeries(files, function(file, cb){
					var rs = fs.createReadStream(extractDir + '/db/' + file);
					var ws = restore.collection(file.slice(0, -5));
					ws.on('error', function(err){
						log('Failed copying some docuemnts.');
					});
					ws.once('finish', function(){
						cb();
					});
					rs.pipe(ws);
				}, function(err){
					restore.close();
					cb(err);
				});
			});
		});
	};

	// clean up
	var cleanUp = function(cb){
		fse.remove(extractDir, function(){
			cb();
		});
	};

	// logger
	var steps = [openFile, unzipFile, checkVersion, restoreFs, restoreDb, cleanUp];
	var logStream = fs.createWriteStream(app.config.app.siteRoot + '/xbackup/backup.log');
	logStream.on('error', function(){});
	var log = function(status, target){
		logStream.write(status + '\n');
		return true;
	};
	logStream.on('open', function(){
		log('Restoring process started.');
		// start steps
		async.waterfall(steps, function(err){
			if(err) {
				logStream.end();
				return;
			}
			log('Restoring process finished.');
			logStream.end();
			app.restart();
		});
	});
};
