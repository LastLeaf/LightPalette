<tmpl id="presentation" minify><!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<link rel="stylesheet" href="/~client{{bindPath}}/lib/reveal.js/css/reveal.min.css">
		<link rel="stylesheet" href="/~client{{bindPath}}/main.css">
		<link rel="stylesheet" href="/~client{{bindPath}}/theme.css" id="theme">
		<script src="/~client{{bindPath}}/lib/reveal.js/lib/js/head.min.js"></script>
		<script src="/~client{{bindPath}}/lib/reveal.js/js/reveal.js"></script>
	</head>
	<body>
{{{html}}}
		<div class="slide-sync">
			<div id="slide_sender" style="display:none">
				<input type="checkbox" id="slide_sender_checkbox"> <label for="slide_sender_checkbox">`Send current progress to online readers.`</label>
			</div>
			<div id="slide_reader" style="display:none">
				<input type="checkbox" id="slide_reader_checkbox"> <label for="slide_reader_checkbox">`Author is online. See the author's progress.`</label>
			</div>
		</div>
<script type="text/javascript">
(function(){
	if(typeof(Reveal) === 'undefined') {
		setTimeout(arguments.callee, 200);
		return;
	}
	// init reveal.js
	Reveal.initialize({
		controls: true,
		progress: true,
		slideNumber: true,
		history: false,
		center: true,
		transition: 'default',
		dependencies: [
			{ src: '/~client{{bindPath}}/lib/reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
			{ src: '/~client{{bindPath}}/lib/reveal.js/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }
		]
	});
	// add full screen button
	var btn = document.createElement('div');
	btn.className = 'full-screen-button';
	btn.style.position = 'absolute';
	btn.style.right = '57px';
	btn.style.bottom = '57px';
	btn.style.width = '16px';
	btn.style.height = '16px';
	document.body.appendChild(btn);
	document.body.ondoubletap = document.body.ondblclick = btn.onclick = function(e){
		if(e.target.parentElement.className === 'controls') return;
		window.toggleFullScreen();
	};
	// sync current slide
	document.getElementById('slide_sender_checkbox').onchange = function(){
		var that = this;
		that.disabled = true;
		var status = Reveal.getIndices();
		if(that.checked)
			pg.rpc('{{bindPath}}/sync:currentSlide.send', {id: postId, col: status.h, row: status.v}, function(){
				that.checked = true;
				that.disabled = false;
			}, function(err){
				that.checked = false;
				that.disabled = false;
			});
		else
			pg.rpc('{{bindPath}}/sync:currentSlide.sendEnd', postId, function(){
				that.checked = false;
				that.disabled = false;
			}, function(err){
				that.checked = true;
				that.disabled = false;
			});
	};
	Reveal.addEventListener('slidechanged', function(e) {
		if(!document.getElementById('slide_sender_checkbox').checked) return;
		var status = Reveal.getIndices();
		pg.rpc('{{bindPath}}/sync:currentSlide.progress', {id: postId, col: status.h, row: status.v});
	});
	var prevStatus = null;
	document.getElementById('slide_reader_checkbox').onchange = function(){
		if(this.checked)
			Reveal.slide(prevStatus.col, prevStatus.row);
	};
	var syncSlide = function(status){
		prevStatus = status;
		if(document.getElementById('slide_reader_checkbox').checked)
			Reveal.slide(status.col, status.row);
	};
	var syncStatus = function(status){
		if(status.type === 'sender') {
			document.getElementById('slide_reader').style.display = 'none';
			document.getElementById('slide_reader_checkbox').checked = false;
			document.getElementById('slide_sender').style.display = 'block';
		} else if(status.type === 'reader') {
			document.getElementById('slide_reader').style.display = 'block';
			document.getElementById('slide_sender').style.display = 'none';
			document.getElementById('slide_sender_checkbox').checked = false;
			syncSlide(status);
		} else if(status.type === 'progress') {
			syncSlide(status);
		} else {
			document.getElementById('slide_reader').style.display = 'none';
			document.getElementById('slide_reader_checkbox').checked = false;
			document.getElementById('slide_sender').style.display = 'none';
			document.getElementById('slide_sender_checkbox').checked = false;
		}
	};
	pg.msg('{{bindPath}}/sync:'+postId, syncStatus);
	var listenCurrentSlide = function(){
		pg.rpc('{{bindPath}}/sync:currentSlide.listen', postId, syncStatus);
	};
	listenCurrentSlide();
	pg.on('socketConnect', listenCurrentSlide);
})();
</script>
	</body>
</html>
</tmpl>
